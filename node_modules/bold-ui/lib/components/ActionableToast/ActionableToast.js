"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionableToast = void 0;
var react_1 = __importStar(require("react"));
var styles_1 = require("../../styles");
var Tooltip_1 = require("../Tooltip");
var Button_1 = require("../Button");
var Icon_1 = require("../Icon");
var i18n_1 = require("../../i18n");
function ActionableToast(props) {
    var id = props.id, message = props.message, _a = props.onClose, onClose = _a === void 0 ? function () { } : _a, title = props.title, _b = props.buttonLabel, buttonLabel = _b === void 0 ? 'Button' : _b, newToast = props.newToast, removeToast = props.removeToast, action = props.action, secondsVisible = props.secondsVisible;
    var locale = i18n_1.useLocale();
    var timeoutRef = react_1.useRef(null);
    var classes = styles_1.useStyles(createStyles).classes;
    var _c = react_1.useState(false), isVisible = _c[0], setIsVisible = _c[1];
    var handleCloseClick = function () {
        onClose();
        removeToast(id);
    };
    var clearTimer = function () {
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = null;
        }
    };
    var startTimer = react_1.useCallback(function () {
        timeoutRef.current = setTimeout(function () {
            setIsVisible(false);
            timeoutRef.current = setTimeout(function () {
                removeToast(id);
            }, 500);
        }, secondsVisible * 1000);
    }, [id, removeToast, secondsVisible]);
    react_1.useEffect(function () {
        setIsVisible(true);
        startTimer();
        return function () { return clearTimer(); };
    }, [secondsVisible, id, startTimer]);
    return (react_1.default.createElement("div", { className: classes.container + " " + (isVisible ? 'visible' : 'hidden'), onMouseEnter: clearTimer, onMouseLeave: startTimer },
        react_1.default.createElement("div", { className: classes.headerWrapper },
            !!newToast && react_1.default.createElement("div", { "aria-hidden": 'true', className: classes.marker }),
            react_1.default.createElement("div", { className: classes.title },
                react_1.default.createElement("h5", null, title)),
            react_1.default.createElement("span", { className: classes.closeButtonWrapper },
                react_1.default.createElement(Tooltip_1.Tooltip, { text: locale.alert.close },
                    react_1.default.createElement(Button_1.Button, { "aria-label": locale.alert.close, size: 'small', skin: 'ghost', style: classes.closeButton, onClick: handleCloseClick },
                        react_1.default.createElement(Icon_1.Icon, { icon: 'timesDefault' }))))),
        react_1.default.createElement("div", { className: classes.toastMessage },
            react_1.default.createElement("h5", null, message)),
        !!action && (react_1.default.createElement("div", { className: classes.actionButtonWrapper },
            react_1.default.createElement(Button_1.Button, { style: classes.actionButton, size: 'small', onClick: action }, buttonLabel)))));
}
exports.ActionableToast = ActionableToast;
var createStyles = function (theme) {
    var _a;
    return ({
        container: (_a = {
                borderRadius: '2px',
                border: '1px',
                display: 'flex',
                flexDirection: 'column',
                position: 'relative',
                marginTop: '0.25rem',
                bottom: '1.25rem',
                minHeight: '5rem',
                minWidth: '16rem',
                backgroundColor: 'white',
                padding: '0 0.5rem 0.5rem 0',
                boxShadow: theme.shadows.outer[40],
                transition: 'transform 0.5s ease-in-out',
                transform: 'translateX(-100%)'
            },
            _a["&.visible"] = { transform: 'translateX(0%)' },
            _a["&.hidden"] = { transform: 'translateX(100%)' },
            _a),
        toastMessage: {
            fontWeight: 'normal',
            display: 'flex',
            alignItems: 'top',
            padding: '0 0 0.5rem 1rem',
        },
        closeButtonWrapper: {
            position: 'absolute',
            width: '1.5rem',
            height: '1.5rem',
            right: '1rem',
            top: '0.5rem',
        },
        closeButton: {
            padding: 0,
        },
        actionButtonWrapper: {
            display: 'flex',
            justifyContent: 'flex-end',
        },
        actionButton: {
            border: "1 px solid " + theme.pallete.gray.c40,
            borderRadius: '0.25rem',
        },
        headerWrapper: {
            display: 'flex',
            justifyContent: 'flex-start',
            alignItems: 'center',
            padding: '0 0 0.25rem 1rem',
            marginTop: '1rem',
        },
        marker: {
            borderRadius: '50%',
            height: '0.5rem',
            width: '0.5rem',
            backgroundColor: theme.pallete.status.danger.c40,
            marginRight: '0.5rem',
        },
        title: {
            color: theme.pallete.primary.main,
        },
    });
};
//# sourceMappingURL=ActionableToast.js.map