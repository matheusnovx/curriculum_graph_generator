"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customDot = exports.customHeader = exports.customTooltip = exports.rangeArea = exports.rangeSelector = exports.xDateTime = exports.boundedReferenceArea = exports.referenceArea = exports.pieChart = exports.composedChart = exports.barChart = exports.columnChart = exports.areaChart = exports.lineChart = void 0;
var addon_knobs_1 = require("@storybook/addon-knobs");
var react_1 = __importStar(require("react"));
var Text_1 = require("../Text");
var colors_1 = require("../../styles/colors");
var BarChart_1 = require("./BarChart");
var Chart_1 = require("./Chart");
var ChartBody_1 = require("./ChartBody");
var ChartContainer_1 = require("./ChartContainer");
var ChartFooter_1 = require("./ChartFooter");
var ChartHeader_1 = require("./ChartHeader");
var model_1 = require("./model");
var PieChart_1 = require("./PieChart");
exports.default = {
    title: 'Components/Chart',
};
var lineSeries = [
    {
        name: 'uv',
        data: [4000, 3000, 2000, 2780, 1890, 2390, 3490, 40000],
    },
    {
        name: 'pv',
        data: [2400, 1398, 9800, 3908, 4800, 3800, 20300],
        dashed: true,
    },
];
var barSeries = [
    {
        name: 'uv',
        data: [4000, 3000, 2000, 2780, 1890, 2390, 3490, 40000],
    },
    {
        name: 'pv',
        data: [2400, 1398, 9800, 3908, 4800, 3800, 20300],
    },
    {
        name: 'pt',
        data: [{ y: 'Page B', x: 2400 }],
    },
];
var composedSeries = [
    {
        name: 'uv',
        data: [4000, 3000, 2000, 2780, 1890, 2390, 3490],
        type: model_1.SeriesType.Column,
    },
    {
        name: 'pv',
        data: [2400, 1398, 9800, 3908, 4800, 3800, 4300],
        dashed: true,
        type: model_1.SeriesType.Area,
    },
    {
        name: 'av',
        data: [2000, 5000, 2000, 9780, 2890, 2890, 3400],
        type: model_1.SeriesType.Line,
    },
];
var ranges = {
    '2 months': { init: new Date(2020, 9) },
    '6 months': { init: new Date(2020, 5) },
    '1 Year': { init: new Date(2020, 0) },
};
var singleLineSeries = {
    name: 'uv',
    data: [
        { x: 20, y: 3000 },
        { x: 100, y: 2800 },
        { x: 200, y: 4300 },
        { x: 300, y: 5550 },
        { x: 500, y: 4000 },
        { x: 650, y: 6400 },
    ],
    color: colors_1.gray.c20,
};
var lineSeriesDP = [
    singleLineSeries,
    {
        name: 'pv',
        data: [2400, 1398, 9800, 3908, 1800, 2800],
        dashed: true,
    },
];
var pieData = [
    { name: 'Ind 1', value: 4000 },
    { name: 'Ind 2', value: 3000 },
    { name: 'Ind 3', value: 2000, color: 'red' },
];
var referenceAreas = [
    {
        label: { name: 'Area 1', description: 'Area 1 desc' },
        area: [
            { x: 0, upperLimit: 2000 },
            { x: 20, upperLimit: 2000 },
            { x: 100, upperLimit: 2000 },
            { x: 120, upperLimit: 2000 },
            { x: 200, upperLimit: 3000 },
            { x: 300, upperLimit: 3000 },
            { x: 400, upperLimit: 3000 },
            { x: 500, upperLimit: 3000 },
            { x: 550, upperLimit: 2000 },
            { x: 700, upperLimit: 2000 },
        ],
        color: '#feeced',
        tick: { color: '#f75b60' },
        stroke: { kind: 'dashed' },
    },
    {
        label: { name: 'Area 2', description: 'Area 2 desc' },
        area: [
            { x: 0, upperLimit: 5000 },
            { x: 20, upperLimit: 5000 },
            { x: 100, upperLimit: 5000 },
            { x: 120, upperLimit: 5000 },
            { x: 200, upperLimit: 5000 },
            { x: 400, upperLimit: 5000 },
            { x: 500, upperLimit: 5000 },
            { x: 550, upperLimit: 5000 },
            { x: 700, upperLimit: 5000 },
        ],
        color: '#ffeed6',
        tick: { color: '#b58b00' },
        stroke: { kind: 'line' },
    },
    {
        label: { name: 'Area 3' },
        area: [
            { x: 0, upperLimit: 10000 },
            { x: 20, upperLimit: 10000 },
            { x: 100, upperLimit: 10000 },
            { x: 120, upperLimit: 10000 },
            { x: 200, upperLimit: 10000 },
            { x: 300, upperLimit: 10000 },
            { x: 400, upperLimit: 10000 },
            { x: 500, upperLimit: 10000 },
            { x: 550, upperLimit: 10000 },
            { x: 700, upperLimit: 10000 },
        ],
        color: '#e1f6df',
        tick: { color: '#40a42b' },
        stroke: { show: false },
    },
];
var generateArea = function (_a) {
    var length = _a.length, start = _a.start, step = _a.step;
    return Array.from({ length: length }, function (_, index) { return ({ x: index * 100, upperLimit: index * step + start }); });
};
var boundedReferenceAreas = [
    {
        label: { name: 'Empty' },
        area: generateArea({ length: 8, start: 2000, step: 350 }),
        color: 'none',
    },
    {
        label: { name: 'Lower', alignment: 'central' },
        area: generateArea({ length: 8, start: 2000, step: 350 }),
        color: colors_1.purple.c90,
        stroke: { color: colors_1.purple.c30, kind: 'dashed' },
        tick: { color: colors_1.purple.c30, kind: 'horizontal' },
    },
    {
        label: { name: 'Lower ref', alignment: 'central', color: colors_1.purple.c30 },
        area: generateArea({ length: 8, start: 2500, step: 450 }),
        color: colors_1.purple.c90,
        stroke: { color: colors_1.purple.c30, kind: 'line' },
        tick: { color: colors_1.purple.c30, kind: 'horizontal' },
    },
    {
        label: { name: 'Upper ref', alignment: 'central' },
        area: generateArea({ length: 8, start: 3000, step: 650 }),
        color: colors_1.purple.c70,
        stroke: { color: colors_1.purple.c30, kind: 'line' },
        tick: { color: colors_1.purple.c30, kind: 'horizontal' },
    },
    {
        label: { name: 'Upper', alignment: 'central' },
        area: generateArea({ length: 8, start: 3500, step: 750 }),
        color: colors_1.purple.c90,
        stroke: { color: colors_1.purple.c30, kind: 'dashed' },
        tick: { color: colors_1.purple.c30, kind: 'horizontal' },
    },
];
var lineSeriesDate = [
    {
        name: 'Series 1',
        data: [
            { x: new Date(2020, 1, 1), y: 4000 },
            { x: new Date(2020, 2, 10), y: 3000 },
            { x: new Date(2020, 3, 15), y: 2000 },
            { x: new Date(2020, 3, 20), y: 2780 },
            { x: new Date(2020, 7, 22), y: 1890 },
            { x: new Date(2020, 10, 30), y: 2390 },
        ],
    },
];
var outliersOption = ['auto', 'expand-domain'];
exports.lineChart = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var showTooltip = addon_knobs_1.boolean('Show Tooltip', true, 'Description');
    var caption = addon_knobs_1.text('Caption', 'Chart description. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.', 'Description');
    var footer = addon_knobs_1.text('Footer', 'Chart footer', 'Description');
    var showLegend = addon_knobs_1.boolean('Show Legend', true, 'Description');
    var colorScheme = addon_knobs_1.radios('Color Scheme', { default: 'default', pink: 'pink', gray: 'gray', blue: 'blue', orange: 'orange' }, 'default', 'Description');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var xAxisDomain = addon_knobs_1.array('X Axis Domain', ['Page A', 'Page B', 'Page C', 'Page D', 'Page E', 'Page F', 'Page G'], ',', 'Axes');
    var series = addon_knobs_1.object('Series', lineSeries, 'Data');
    var outliers = addon_knobs_1.select('Outliers', outliersOption, 'auto', 'Description');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: title }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500, caption: caption },
            react_1.default.createElement(Chart_1.Chart, { series: series, xAxis: { title: xAxisTitle, domain: xAxisDomain }, yAxis: { title: yAxisTitle, domain: { init: 3000, end: 10000, step: 5500 } }, tooltip: { type: showTooltip ? 'point' : 'none' }, colorScheme: colorScheme, showLegend: showLegend, outliers: outliers })),
        react_1.default.createElement(ChartFooter_1.ChartFooter, null, footer)));
};
exports.areaChart = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var stacked = addon_knobs_1.boolean('Stacked', false, 'Description');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var xAxisDomain = addon_knobs_1.array('X Axis Domain', ['Page A', 'Page B', 'Page C', 'Page D'], ',', 'Axes');
    var series = addon_knobs_1.object('Series', lineSeries, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: title }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(Chart_1.Chart, { type: model_1.SeriesType.Area, series: series, xAxis: { title: xAxisTitle, domain: xAxisDomain }, yAxis: { title: yAxisTitle, unit: 'cm' }, stacked: stacked }))));
};
exports.columnChart = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var stacked = addon_knobs_1.boolean('Stacked', false, 'Description');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var xAxisDomain = addon_knobs_1.array('X Axis Domain', ['Page A', 'Page B', 'Page C', 'Page D'], ',', 'Axes');
    var series = addon_knobs_1.object('Series', lineSeries, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: title }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(Chart_1.Chart, { type: model_1.SeriesType.Column, series: series, xAxis: { title: xAxisTitle, domain: xAxisDomain }, yAxis: { title: yAxisTitle, unit: 'cm' }, stacked: stacked }))));
};
exports.barChart = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var stacked = addon_knobs_1.boolean('Stacked', false, 'Description');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var yAxisDomain = addon_knobs_1.array('X Axis Domain', ['Page A', 'Page B', 'Page C', 'Page D'], ',', 'Axes');
    var series = addon_knobs_1.object('Series', barSeries, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: title }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(BarChart_1.BarChart, { series: series, yAxis: { title: yAxisTitle, domain: yAxisDomain }, xAxis: { title: xAxisTitle, unit: 'cm' }, stacked: stacked }))));
};
exports.composedChart = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var stacked = addon_knobs_1.boolean('Stacked', false, 'Description');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var xAxisDomain = addon_knobs_1.array('X Axis Domain', ['Page A', 'Page B', 'Page C', 'Page D'], ',', 'Axes');
    var series = addon_knobs_1.object('Series', composedSeries, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: title }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(Chart_1.Chart, { series: series, xAxis: { title: xAxisTitle, domain: xAxisDomain }, yAxis: { title: yAxisTitle, unit: 'cm' }, stacked: stacked }))));
};
exports.pieChart = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var caption = addon_knobs_1.text('Caption', 'Chart description. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.', 'Description');
    var data = addon_knobs_1.object('Series', pieData, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: title }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500, caption: caption },
            react_1.default.createElement(PieChart_1.PieChart, { height: 500, width: 800, data: data }))));
};
exports.referenceArea = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var caption = addon_knobs_1.text('Caption', 'Chart description. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.', 'Description');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var height = addon_knobs_1.number('Height', 500);
    var series = addon_knobs_1.object('Series', lineSeriesDP, 'Data');
    var reference = addon_knobs_1.object('Reference', referenceAreas, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: title }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: height, caption: caption },
            react_1.default.createElement(Chart_1.Chart, { series: series, referenceAreas: reference, xAxis: { title: xAxisTitle, domain: { init: 0, end: 700, step: 100 } }, yAxis: { title: yAxisTitle, domain: { init: 0, end: 10000, step: 1000 } } }))));
};
exports.boundedReferenceArea = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var caption = addon_knobs_1.text('Caption', 'Chart description. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.', 'Description');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var height = addon_knobs_1.number('Height', 500);
    var series = addon_knobs_1.object('Series', [singleLineSeries], 'Data');
    var reference = addon_knobs_1.object('Reference', boundedReferenceAreas, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: title }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: height, caption: caption },
            react_1.default.createElement(Chart_1.Chart, { series: series, referenceAreas: reference, xAxis: { title: xAxisTitle, domain: { init: 0, end: 700, step: 100 } }, yAxis: { title: yAxisTitle, domain: { init: 0, end: 10000, step: 1000 } } }))));
};
exports.xDateTime = function () {
    var xAxisInit = addon_knobs_1.date('Init Date', new Date(2020, 3), 'X Axis');
    var xAxisEnd = addon_knobs_1.date('End Date', new Date(2020, 4), 'X Axis');
    var step = addon_knobs_1.number('Step', 10, {}, 'X Axis');
    var stepType = addon_knobs_1.radios('Step Type', { day: 'day', month: 'month', year: 'year' }, 'day', 'X Axis');
    var yAxisInit = addon_knobs_1.number('Init', 0, {}, 'Y Axis');
    var yAxisEnd = addon_knobs_1.number('End', 4000, {}, 'Y Axis');
    var yAxisStep = addon_knobs_1.number('Step', 1000, {}, 'Y Axis');
    var series = addon_knobs_1.object('Series', lineSeriesDate, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(Chart_1.Chart, { height: 500, width: 500, series: series, xAxis: {
                    title: 'Date',
                    domain: {
                        init: new Date(xAxisInit),
                        end: new Date(xAxisEnd),
                        step: { amount: step, unit: stepType },
                    },
                    tickRenderer: function (props) { return (react_1.default.createElement("text", __assign({ dy: 15 }, props), new Date(props.payload.value).toLocaleDateString())); },
                }, yAxis: {
                    domain: {
                        init: yAxisInit,
                        end: yAxisEnd,
                        step: yAxisStep,
                    },
                } }))));
};
exports.rangeSelector = function () {
    var series = addon_knobs_1.object('Series', lineSeriesDate, 'Data');
    var selectorLabel = addon_knobs_1.text('Label', 'Range', 'Selector');
    var selectorRanges = addon_knobs_1.object('Options', ranges, 'Selector');
    var StateKeeper = function (_a) {
        var children = _a.children;
        var _b = react_1.useState(selectorRanges['6 months']), xRange = _b[0], setXRange = _b[1];
        var xDomain = {
            init: new Date(2020, 0),
            end: new Date(2020, 11),
            format: Intl.DateTimeFormat('pt-BR', { month: '2-digit', year: '2-digit' }).format,
            step: { amount: 1, unit: 'month' },
        };
        var xAxis = {
            title: 'Date',
            domain: xDomain,
        };
        xAxis.domain = (Array.isArray(xDomain) ? xRange || xDomain : __assign(__assign({}, xDomain), xRange));
        return react_1.default.createElement("div", null, children(xAxis, setXRange));
    };
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(StateKeeper, null, function (rangedXDomain, setXRange) { return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(ChartHeader_1.ChartHeader, { title: 'Date Chart', rangeSelector: {
                    label: selectorLabel,
                    options: selectorRanges,
                    defaultOption: '6 months',
                }, onRangeChange: setXRange }),
            react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
                react_1.default.createElement(Chart_1.Chart, { height: 500, width: 1000, series: series, xAxis: rangedXDomain, yAxis: {
                        domain: { init: 0, end: 4000, step: 1000 },
                    } })))); })));
};
exports.rangeArea = function () {
    var ranges = addon_knobs_1.object('Range Areas', [
        { name: 'Area 1 Area 1-2 Area 1-3 Area 1-4', init: 'Page A', end: 'Page C' },
        {
            name: 'Area 2 Stroke 2',
            init: 'Page E',
            end: 'Page F',
            tickColor: colors_1.green.c60,
            fillColor: 'none',
            strokeColor: colors_1.green.c60,
        },
    ], 'Areas');
    var series = addon_knobs_1.object('Series', lineSeries, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: 'Chart Title' }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(Chart_1.Chart, { type: model_1.SeriesType.Line, series: series, rangeAreas: ranges, xAxis: { title: 'X Axis', domain: ['Page A', 'Page B', 'Page C', 'Page D', 'Page E', 'Page F', 'Page G'] }, yAxis: { title: 'Y Axis', domain: { init: 3000, end: 10000, step: 5500 }, unit: 'unit' } }))));
};
exports.customTooltip = function () {
    var tooltipType = addon_knobs_1.radios('Tooltip Type', { point: 'point', line: 'line' }, 'line', 'Description');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var xAxisDomain = addon_knobs_1.array('X Axis Domain', ['Page A', 'Page B', 'Page C', 'Page D', 'Page E', 'Page F', 'Page G'], ',', 'Axes');
    var series = addon_knobs_1.object('Series', lineSeries, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartHeader_1.ChartHeader, { title: 'Chart Title' }),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(Chart_1.Chart, { type: model_1.SeriesType.Line, series: series, xAxis: { title: xAxisTitle, domain: xAxisDomain }, yAxis: { title: yAxisTitle, domain: { init: 3000, end: 10000, step: 5500 }, unit: 'unit' }, tooltip: {
                    type: tooltipType,
                    render: function (dp) {
                        return tooltipType === 'line'
                            ? dp === null || dp === void 0 ? void 0 : dp.map(function (p) { return (react_1.default.createElement(Text_1.Text, { component: 'p', style: { color: colors_1.gray.c100 }, key: p.y }, p.seriesName + ": " + p.y + " unit")); }) : dp[0].y + " - " + dp[0].x;
                    },
                } }))));
};
exports.customHeader = function () {
    var title = addon_knobs_1.text('Title', 'Chart Title', 'Description');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var xAxisDomain = addon_knobs_1.array('X Axis Domain', ['Page A', 'Page B', 'Page C', 'Page D', 'Page E', 'Page F', 'Page G'], ',', 'Axes');
    var series = addon_knobs_1.object('Series', lineSeries, 'Data');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement("h1", { style: { color: 'red', fontWeight: 'bold', padding: '1rem' } },
            react_1.default.createElement("input", { type: 'checkbox' }),
            title),
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(Chart_1.Chart, { type: model_1.SeriesType.Line, series: series, xAxis: { title: xAxisTitle, domain: xAxisDomain }, yAxis: { title: yAxisTitle, domain: { init: 3000, end: 10000, step: 5500 }, unit: 'unit' } }))));
};
exports.customDot = function () {
    var dotShape = addon_knobs_1.radios('Dot Shape', {
        circle: 'circle',
        cross: 'cross',
        diamond: 'diamond',
        rectangle: 'rect',
        square: 'square',
        star: 'star',
        triangle: 'triangle',
    }, 'star', 'Dot');
    var yAxisTitle = addon_knobs_1.text('Y Axis Title', 'Y Axis', 'Axes');
    var xAxisTitle = addon_knobs_1.text('X Axis Title', 'X Axis', 'Axes');
    var xAxisDomain = addon_knobs_1.array('X Axis Domain', ['Page A', 'Page B', 'Page C', 'Page D', 'Page E', 'Page F', 'Page G'], ',', 'Axes');
    return (react_1.default.createElement(ChartContainer_1.ChartContainer, null,
        react_1.default.createElement(ChartBody_1.ChartBody, { height: 500 },
            react_1.default.createElement(Chart_1.Chart, { series: [
                    {
                        name: 'uv',
                        data: [4000, 3000, 2000, 2780, 1890, 2390, 3490, 40000],
                        dot: dotShape,
                    },
                    {
                        name: 'pv',
                        data: [2400, 1398, 9800, 3908, 4800, 3800, 20300],
                        dashed: true,
                    },
                ], xAxis: { title: xAxisTitle, domain: xAxisDomain }, yAxis: { title: yAxisTitle, domain: { init: 3000, end: 10000, step: 5500 } } }))));
};
//# sourceMappingURL=Chart.stories.js.map