"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartTooltip = void 0;
var react_1 = __importDefault(require("react"));
var styles_1 = require("../../styles");
var Tooltip_1 = require("../Tooltip");
var model_1 = require("./model");
var util_1 = require("./util");
function ChartTooltip(props) {
    var children = props.children, label = props.label, value = props.value, labelDomain = props.labelDomain, showTooltip = props.showTooltip, seriesName = props.seriesName, renderer = props.renderer;
    var classes = styles_1.useStyles(createStyles).classes;
    var tooltip;
    if (!renderer) {
        var xValue = labelDomain ? getTooltipLabelFormatter(labelDomain)(label).toString() : label;
        tooltip = value + " - " + xValue;
    }
    else {
        tooltip = renderer([{ seriesName: seriesName, x: label, y: value }]);
    }
    return (react_1.default.createElement(Tooltip_1.Tooltip, { text: showTooltip && tooltip, style: classes.tooltip }, children));
}
exports.ChartTooltip = ChartTooltip;
ChartTooltip.defaultProps = {
    showTooltip: true,
};
function getTooltipLabelFormatter(domain) {
    if (Array.isArray(domain))
        return function (x) { return x; };
    if (model_1.isValueRange(domain))
        return function (x) { return x; };
    else
        return function (x) { var _a; return ((_a = domain.format) !== null && _a !== void 0 ? _a : util_1.defaultChartDateFormatter)(new Date(x)); };
}
var createStyles = function (theme) { return ({
    tooltip: {
        fontFamily: theme.typography.fontFamily,
    },
}); };
//# sourceMappingURL=ChartTooltip.js.map