"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertReferenceRangesToPercents = void 0;
function convertReferenceRangesToPercents(referenceAreas, yRange) {
    return referenceAreas === null || referenceAreas === void 0 ? void 0 : referenceAreas.map(function (ref, i) { return (__assign(__assign({}, ref), { areaPercents: ref.area.map(function (area) { return getReferenceAreaPercent(area, referenceAreas, yRange, i); }).filter(function (e) { return e; }) })); });
}
exports.convertReferenceRangesToPercents = convertReferenceRangesToPercents;
function getReferenceAreaPercent(range, rangeAreas, yRange, currAreaIdx) {
    var _a;
    var max = getUpperLimitValue(range.upperLimit, yRange);
    var prevArea = getPrevArea(rangeAreas, currAreaIdx, range.x);
    var min = prevArea ? (_a = getUpperLimitValue(prevArea.upperLimit, yRange)) !== null && _a !== void 0 ? _a : yRange.end : yRange.init;
    return {
        x: range.x,
        percent: (((max !== null && max !== void 0 ? max : yRange.end) - (min !== null && min !== void 0 ? min : yRange.init)) / (yRange.end - yRange.init)) * 100,
    };
}
var getUpperLimitValue = function (upperLimit, yRange) {
    return upperLimit === 'yEnd' ? yRange.end : upperLimit === 'yInit' ? yRange.init : upperLimit;
};
function getPrevArea(rangeAreas, currAreaIdx, x) {
    var _a;
    for (var _i = 0, _b = rangeAreas.slice(0, currAreaIdx).reverse(); _i < _b.length; _i++) {
        var ra = _b[_i];
        var range = (_a = ra.area) === null || _a === void 0 ? void 0 : _a.find(function (a) { return a.x === x; });
        if (range)
            return range;
    }
}
//# sourceMappingURL=convertReferenceRangesToPercents.js.map