"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDomainPoints = void 0;
var dateRangeStepToMillis_1 = require("./dateRangeStepToMillis");
var model_1 = require("./model");
var util_1 = require("./util");
function getDomainPoints(domain, hasOutliers) {
    if (hasOutliers === void 0) { hasOutliers = false; }
    if (!domain || Array.isArray(domain))
        return domain;
    if (model_1.isValueRange(domain))
        return getValueRangeDomainPoints(domain, hasOutliers);
    else
        return getDateRangeDomainPoints(domain, hasOutliers);
}
exports.getDomainPoints = getDomainPoints;
function getValueRangeDomainPoints(domain, hasOutliers) {
    var _a;
    var points = [];
    var step = (_a = domain.step) !== null && _a !== void 0 ? _a : 1;
    for (var i = domain.init; i <= domain.end; i += step)
        points.push(i);
    if (!points.includes(domain.end))
        points.push(domain.end);
    if (hasOutliers)
        points.push(domain.end + util_1.getOutlierStep(step));
    return points;
}
function getDateRangeDomainPoints(domain, hasOutliers) {
    var _a;
    if (hasOutliers === void 0) { hasOutliers = false; }
    var points = [];
    var step = (_a = domain.step) !== null && _a !== void 0 ? _a : { amount: 1, unit: 'day' };
    var endMillis = +domain.end;
    var currValue = +domain.init;
    do {
        points.push(currValue.valueOf());
        currValue = addStepToDate(currValue, step);
    } while (currValue < endMillis);
    if (!points.includes(endMillis))
        points.push(domain.end.valueOf());
    if (hasOutliers) {
        var outlierStepAmount = util_1.getOutlierStep(step.amount);
        var outlierDate = addStepToDate(+domain.end, { amount: outlierStepAmount, unit: step.unit });
        points.push(outlierDate);
    }
    return points;
}
function addStepToDate(dateMillis, step) {
    switch (step.unit) {
        case 'year':
            var newDateY = new Date(dateMillis);
            newDateY.setFullYear(newDateY.getFullYear() + step.amount);
            return +newDateY;
        case 'month':
            var newDateM = new Date(dateMillis);
            newDateM.setMonth(newDateM.getMonth() + step.amount);
            return +newDateM;
        default:
            return dateMillis + dateRangeStepToMillis_1.dateRangeStepToMillis(step);
    }
}
//# sourceMappingURL=getDomainPoints.js.map