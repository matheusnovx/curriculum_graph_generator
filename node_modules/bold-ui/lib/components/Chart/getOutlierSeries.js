"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitOutlierSeries = void 0;
var util_1 = require("./util");
function splitOutlierSeries(series, xDomain, rangeDomainPoints, yDomain, outliers) {
    var _a = series.reduce(function (serieAcc, seriesCurr) {
        var _a;
        var maxValue = util_1.getDomainMaxValue(yDomain);
        var filteredData = seriesCurr.data.filter(function (d, i) {
            return d.x ? util_1.isInsideDomain(d.x, xDomain) : i < rangeDomainPoints.length;
        });
        var seriesData = reduceSeriesData(filteredData, maxValue, outliers);
        serieAcc[0].push(__assign(__assign({}, seriesCurr), { dataKey: (_a = seriesCurr.dataKey) !== null && _a !== void 0 ? _a : seriesCurr.name, data: seriesData.map(function (series) { return series.data; }) }));
        serieAcc[1].push(__assign(__assign({}, seriesCurr), { name: "outlier" + seriesCurr.name, dataKey: "outlier", data: seriesData.map(function (series) { return series.isOutlier; }) }));
        return serieAcc;
    }, [[], []]), rangedSeries = _a[0], outlierSeries = _a[1];
    var hasOutliers = outlierSeries.some(function (s) { return s.data.some(function (d) { return d; }); });
    return {
        rangedSeries: rangedSeries,
        outlierSeries: outlierSeries,
        hasOutliers: hasOutliers,
    };
}
exports.splitOutlierSeries = splitOutlierSeries;
function reduceSeriesData(data, maxValue, outliers) {
    return data.reduce(function (acc, cur) {
        if (outliers === 'auto') {
            acc.push({ data: cur, isOutlier: util_1.isOutlier(cur, maxValue) });
        }
        else {
            acc.push({ data: cur, isOutlier: false });
        }
        return acc;
    }, []);
}
//# sourceMappingURL=getOutlierSeries.js.map