/// <reference types="react" />
import { Color } from 'csstype';
import { TickProps } from './Tick';
declare const CHART_COLOR_SCHEMES: {
    blue: string[];
    orange: string[];
    pink: string[];
    gray: string[];
    default: string[];
};
export declare type ChartColorScheme = keyof typeof CHART_COLOR_SCHEMES | Color[];
export declare type ValueRange = {
    init: number;
    end: number;
    step?: number;
};
export declare type UnitOfTime = 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'second' | 'millisecond';
export declare type DateRangeStep = {
    amount: number;
    unit: UnitOfTime;
};
export declare type DateRange = {
    init: Date;
    end: Date;
    format?: (date: Date) => string;
    step?: DateRangeStep;
};
export declare type SeriesDataPoint = number | Date | DataPoint<number> | DataPoint<Date>;
export declare type ReferenceAreaDataPoint = number | DataPoint<number>;
export declare type AxisDomain = string[] | ValueRange | DateRange;
export declare type TooltipType = 'point' | 'line' | 'none';
export declare type DotShape = 'circle' | 'square' | 'rect' | 'triangle' | 'diamond' | 'cross' | 'star' | 'happy';
export declare type OutliersType = 'auto' | 'expand-domain';
export declare type TooltipRenderer<XDomain> = (points?: (DataPoint<XDomain> & {
    seriesName: string;
})[]) => string | React.ReactNode;
export declare enum SeriesType {
    Line = 0,
    Column = 1,
    Area = 2
}
export interface DataPoint<XDomain, YDomain = number> {
    x: XDomain;
    y: YDomain;
}
export declare type ChartSeriesDataPoint<XDomain> = number | DataPoint<XDomain, number>;
export interface ChartSeries<XDomain> {
    type?: SeriesType;
    name: string;
    data: ChartSeriesDataPoint<XDomain>[] | boolean[];
    color?: string;
    dashed?: boolean;
    dot?: false | DotShape;
    dataKey?: string;
}
export interface BarChartSeries<YDomain> {
    name: string;
    data: number[] | DataPoint<number, YDomain>[];
    color?: string;
}
export interface PieChartDataPoint {
    name: string;
    value: number;
    color?: string;
}
export interface RangeArea<XDomain> {
    name: string;
    init: XDomain;
    end: XDomain;
    strokeColor?: string | false;
    fillColor?: string | false;
    fillOpacity?: number;
    tickColor?: string | false;
}
export interface ReferenceAreaRange<XDomain> {
    x: XDomain;
    upperLimit?: number | 'yEnd' | 'yInit';
}
export interface ReferenceAreaPercent<XDomain> {
    x: XDomain;
    percent: number;
}
interface ReferenceAreaLabel {
    name: string;
    description?: string;
    color?: string;
    alignment?: 'central' | 'text-before-edge';
}
interface ReferenceAreaTick {
    color?: string;
    kind?: 'horizontal' | 'vertical';
}
interface ReferenceAreaStroke {
    show?: boolean;
    color?: string;
    kind?: 'line' | 'dashed';
}
export interface ReferenceArea<XDomain> {
    label: ReferenceAreaLabel;
    area: ReferenceAreaRange<XDomain>[];
    color?: string;
    tick?: ReferenceAreaTick;
    stroke?: ReferenceAreaStroke;
}
export interface ReferenceAreaWithPercents<XDomain> extends ReferenceArea<XDomain> {
    areaPercents: ReferenceAreaPercent<XDomain>[];
}
export interface AxisOptions {
    title?: string;
    unit?: string;
    domain?: AxisDomain;
    tickRenderer?: (tick: TickProps, domainMaxValue: number | Date, isAxisX: boolean, isOutlierIndicator?: boolean) => React.SVGProps<SVGElement>;
}
export interface RangeSelectorOptions {
    label?: string;
    options: {
        [x: string]: Partial<AxisDomain>;
    };
    defaultOption?: string;
}
export interface CustomDotProps {
    cx?: number;
    cy?: number;
    stroke?: string;
    shape?: DotShape;
}
export interface TooltipOptions<XDomain> {
    type: TooltipType;
    render?: TooltipRenderer<XDomain>;
}
export interface DataPointWithOutlier<XDomain> {
    data: ChartSeriesDataPoint<XDomain>;
    isOutlier: boolean;
}
export declare function isValueRange(x: AxisDomain): x is ValueRange;
export declare function isDateRange(x: AxisDomain): x is DateRange;
export declare function getChartColorScheme(colorScheme: ChartColorScheme): Color[];
export {};
