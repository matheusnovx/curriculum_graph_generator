"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderReferenceAxis = exports.renderAxis = void 0;
var react_1 = __importDefault(require("react"));
var recharts_1 = require("recharts");
var model_1 = require("./model");
var ReferenceAreaTick_1 = require("./ReferenceAreaTick");
var util_1 = require("./util");
var Tick_1 = require("./Tick");
function renderAxis(axis, options, domain, domainPoints, hasOutliers, isBar) {
    var isAxisX = axis === 'x';
    if (isAxisX)
        return (react_1.default.createElement(recharts_1.XAxis, __assign({ dataKey: isBar ? undefined : 'x', axisLine: !isBar, tickLine: !isBar }, getAxisProps(domain, domainPoints, options, isAxisX, hasOutliers)), options.title && (react_1.default.createElement(recharts_1.Label, { position: 'bottom', value: options.title + ((options === null || options === void 0 ? void 0 : options.unit) ? " (" + options.unit + ")" : ''), dy: 5, style: { fontWeight: 'bold' } }))));
    else
        return (react_1.default.createElement(recharts_1.YAxis, __assign({ dataKey: isBar ? 'x' : undefined, axisLine: isBar, tickLine: isBar, yAxisId: 'data' }, getAxisProps(domain, domainPoints, options, isAxisX, hasOutliers)), (options === null || options === void 0 ? void 0 : options.title) && (react_1.default.createElement(recharts_1.Label, { value: (options === null || options === void 0 ? void 0 : options.title) + ((options === null || options === void 0 ? void 0 : options.unit) ? " (" + options.unit + ")" : ''), dy: -45, dx: 8, position: 'insideTopLeft', style: { fontWeight: 'bold' } }))));
}
exports.renderAxis = renderAxis;
function renderReferenceAxis(axis, referenceAreas) {
    var refTicks = getRefTicks(referenceAreas);
    if (axis === 'y')
        return (react_1.default.createElement(recharts_1.YAxis, { dataKey: 'y', yAxisId: 'refArea', domain: [0, 100], orientation: 'right', unit: '%', interval: 0, axisLine: false, tickLine: false, ticks: Array.from(refTicks.keys()), tick: react_1.default.createElement(ReferenceAreaTick_1.ReferenceAreaTick, { refTicks: refTicks }) }));
    else
        return (react_1.default.createElement(recharts_1.XAxis, { dataKey: 'y', xAxisId: 'refArea', domain: [0, 100], orientation: 'bottom', unit: '%', interval: 0, axisLine: false, tickLine: false, ticks: Array.from(refTicks.keys()), tick: react_1.default.createElement(ReferenceAreaTick_1.ReferenceAreaTick, { refTicks: refTicks }) }));
}
exports.renderReferenceAxis = renderReferenceAxis;
function getAxisProps(axisDomain, domainPoints, axisOptions, isAxisX, hasOutliers) {
    var _a;
    var outliersIndex = hasOutliers ? domainPoints.length - 1 : -1;
    if (!axisDomain || Array.isArray(axisDomain))
        return {
            type: Array.isArray(axisDomain) ? 'category' : 'number',
            ticks: domainPoints,
            allowDuplicatedCategory: false,
            interval: 0,
            tick: (_a = axisOptions.tickRenderer) !== null && _a !== void 0 ? _a : true,
        };
    else if (model_1.isValueRange(axisDomain))
        return {
            type: 'number',
            domain: [axisDomain.init, axisDomain.end],
            ticks: domainPoints,
            interval: 0,
            tick: axisOptions.tickRenderer
                ? function (props) {
                    return axisOptions.tickRenderer(util_1.convertTickProps(props), axisDomain.end, isAxisX, hasOutliers && props.index === outliersIndex);
                }
                : function (props) { return (react_1.default.createElement(Tick_1.Tick, __assign({}, props, { isOutlierIndicator: hasOutliers && props.index === outliersIndex, domainMaxValue: axisDomain.end, isAxisX: isAxisX }))); },
        };
    else
        return {
            type: 'number',
            domain: [axisDomain.init.valueOf(), axisDomain.end.valueOf()],
            ticks: domainPoints,
            interval: 0,
            tickFormatter: function (x) { var _a; return ((_a = axisDomain.format) !== null && _a !== void 0 ? _a : util_1.defaultChartDateFormatter)(new Date(x)); },
            tick: axisOptions.tickRenderer
                ? function (props) {
                    return axisOptions.tickRenderer(util_1.convertTickProps(props), axisDomain.end, isAxisX, hasOutliers && props.index === outliersIndex);
                }
                : function (props) { return (react_1.default.createElement(Tick_1.Tick, __assign({}, props, { isOutlierIndicator: hasOutliers && props.index === outliersIndex, end: axisDomain.end, isAxisX: isAxisX }))); },
        };
}
function getRefTicks(referenceAreas) {
    return referenceAreas === null || referenceAreas === void 0 ? void 0 : referenceAreas.reduce(function (acc, ref) {
        var lastPercent = ref.areaPercents.slice(-1)[0].percent;
        acc.map.set(acc.acc + lastPercent, ref);
        acc.acc += lastPercent;
        return acc;
    }, { acc: 0, map: new Map() }).map;
}
//# sourceMappingURL=renderAxis.js.map