"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderBar = exports.renderReferenceAreas = exports.renderSeries = void 0;
var react_1 = __importDefault(require("react"));
var recharts_1 = require("recharts");
var ChartTooltip_1 = require("./ChartTooltip");
var LineDot_1 = require("./LineDot");
var model_1 = require("./model");
var SeriesLabel_1 = require("./SeriesLabel");
var util_1 = require("./util");
function renderSeries(chartType, series, index, xAxis, stacked, colorScheme, showTooltip, dataKey, tooltipRenderer, data) {
    var _a, _b;
    switch ((_b = (_a = series.type) !== null && _a !== void 0 ? _a : chartType) !== null && _b !== void 0 ? _b : model_1.SeriesType.Line) {
        case model_1.SeriesType.Line:
            return renderLine(index, series, showTooltip, xAxis.domain, colorScheme, dataKey, tooltipRenderer, data);
        case model_1.SeriesType.Column:
            return renderColumn(index, series, stacked, showTooltip, xAxis.domain, colorScheme, tooltipRenderer);
        case model_1.SeriesType.Area:
            return renderArea(index, series, showTooltip, xAxis.domain, stacked, colorScheme, dataKey, tooltipRenderer, data);
    }
}
exports.renderSeries = renderSeries;
function renderReferenceAreas(refArea, index, colorScheme) {
    var _a, _b;
    var refAreaColor = refArea.color, tick = refArea.tick, stroke = refArea.stroke, name = refArea.label;
    var cs = model_1.getChartColorScheme(colorScheme);
    var color = refAreaColor !== null && refAreaColor !== void 0 ? refAreaColor : cs[index % cs.length];
    return (react_1.default.createElement(recharts_1.Area, __assign({}, getDefaultRenderProps(name.name, color), { stroke: (_b = (_a = stroke === null || stroke === void 0 ? void 0 : stroke.color) !== null && _a !== void 0 ? _a : tick === null || tick === void 0 ? void 0 : tick.color) !== null && _b !== void 0 ? _b : color, type: 'monotone', yAxisId: 'refArea', stackId: 'refAreaStack', label: false, strokeWidth: (stroke === null || stroke === void 0 ? void 0 : stroke.show) === false ? 0 : 1, strokeDasharray: (stroke === null || stroke === void 0 ? void 0 : stroke.kind) === 'dashed' || (stroke === null || stroke === void 0 ? void 0 : stroke.kind) === undefined ? '6 4' : '0', connectNulls: true, isRange: true, legendType: 'none' })));
}
exports.renderReferenceAreas = renderReferenceAreas;
function renderLine(index, series, showTooltip, xDomain, colorScheme, dataKey, tooltipRenderer, data) {
    var _a, _b;
    var name = series.name, dashed = series.dashed, dot = series.dot;
    var cs = model_1.getChartColorScheme(colorScheme);
    var color = (_a = series.color) !== null && _a !== void 0 ? _a : cs[index % cs.length];
    return (react_1.default.createElement(recharts_1.Line, __assign({}, getDefaultRenderProps(name, color, dataKey), { activeDot: { r: 12, fill: color, opacity: 0.3 }, dot: dot === false ? (false) : (react_1.default.createElement(LineDot_1.LineDot, { showTooltip: showTooltip, xDomain: xDomain, tooltipRenderer: tooltipRenderer, dotShape: dot })), strokeWidth: 2, yAxisId: 'data', connectNulls: true, label: function (dataPoint) { return (react_1.default.createElement(SeriesLabel_1.SeriesLabel, __assign({ outlierValue: data[dataPoint.index][util_1.getOutlierSeriesName(name)], seriesType: model_1.SeriesType.Line, color: color }, dataPoint))); }, strokeDasharray: dashed && '6 4', legendType: dot === false ? 'plainline' : (_b = dot) !== null && _b !== void 0 ? _b : 'circle' })));
}
function renderArea(index, series, showTooltip, xDomain, stacked, colorScheme, dataKey, tooltipRenderer, data) {
    var _a, _b;
    var name = series.name, dashed = series.dashed, dot = series.dot;
    var cs = model_1.getChartColorScheme(colorScheme);
    var color = (_a = series.color) !== null && _a !== void 0 ? _a : cs[index % cs.length];
    return (react_1.default.createElement(recharts_1.Area, __assign({}, getDefaultRenderProps(name, color, dataKey), { fillOpacity: 0.1, dot: dot === false ? (false) : (react_1.default.createElement(LineDot_1.LineDot, { showTooltip: showTooltip, xDomain: xDomain, tooltipRenderer: tooltipRenderer, dotShape: dot })), strokeWidth: 2, yAxisId: 'data', connectNulls: true, label: function (dataPoint) { return (react_1.default.createElement(SeriesLabel_1.SeriesLabel, __assign({ outlierValue: data[dataPoint.index][util_1.getOutlierSeriesName(name)], seriesName: name, seriesType: model_1.SeriesType.Line, color: color }, dataPoint))); }, strokeDasharray: dashed && '6 4', legendType: dot === false ? 'plainline' : (_b = dot) !== null && _b !== void 0 ? _b : 'circle', stackId: stacked ? 'stackId' : undefined })));
}
function renderColumn(index, series, stacked, showTooltip, xDomain, colorScheme, tooltipRenderer) {
    var _a;
    var name = series.name;
    var cs = model_1.getChartColorScheme(colorScheme);
    var color = (_a = series.color) !== null && _a !== void 0 ? _a : cs[index % cs.length];
    return (react_1.default.createElement(recharts_1.Bar, __assign({}, getDefaultRenderProps(name, color), { stackId: stacked ? 'stackId' : undefined, yAxisId: 'data', shape: function (props) {
            var _a;
            return (react_1.default.createElement(ChartTooltip_1.ChartTooltip, { labelDomain: xDomain, label: (_a = props.payload) === null || _a === void 0 ? void 0 : _a.x, value: props.value, showTooltip: showTooltip, renderer: tooltipRenderer },
                react_1.default.createElement(recharts_1.Rectangle, __assign({}, props))));
        }, label: { fill: color, position: 'top' }, legendType: 'circle' }), stacked && react_1.default.createElement(recharts_1.LabelList, __assign({ dataKey: name, position: 'insideTop', offset: 12 }, { fill: 'white' }))));
}
function renderBar(index, series, stacked, showTooltip, yDomain, colorScheme, tooltipRenderer) {
    var _a;
    var name = series.name;
    var cs = model_1.getChartColorScheme(colorScheme);
    var color = (_a = series.color) !== null && _a !== void 0 ? _a : cs[index % cs.length];
    return (react_1.default.createElement(recharts_1.Bar, __assign({}, getDefaultRenderProps(name, color), { stackId: stacked ? 'stackId' : undefined, yAxisId: 'data', shape: function (props) { return (react_1.default.createElement(ChartTooltip_1.ChartTooltip, { labelDomain: yDomain, label: props.payload.x, value: props.value, showTooltip: showTooltip, renderer: tooltipRenderer },
            react_1.default.createElement(recharts_1.Rectangle, __assign({}, props)))); }, label: { fill: color, position: 'right' }, legendType: 'circle' }), stacked && react_1.default.createElement(recharts_1.LabelList, __assign({ dataKey: name, position: 'insideRight', offset: 12 }, { fill: 'white' }))));
}
exports.renderBar = renderBar;
function getDefaultRenderProps(name, color, dataKey) {
    return {
        key: name,
        dataKey: dataKey !== null && dataKey !== void 0 ? dataKey : name,
        stroke: color,
        fill: color,
        isAnimationActive: false,
    };
}
//# sourceMappingURL=renderSeries.js.map