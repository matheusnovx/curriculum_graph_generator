"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderTooltip = void 0;
var react_1 = __importDefault(require("react"));
var recharts_1 = require("recharts");
var styles_1 = require("../../styles");
var Text_1 = require("../Text");
var model_1 = require("./model");
var util_1 = require("./util");
function renderTooltip(xAxis, yAxis, tooltipRenderer) {
    return (react_1.default.createElement(recharts_1.Tooltip, { content: function (props) { return (react_1.default.createElement(CustomTooltip, __assign({}, props, { tooltipFormatter: tooltipRenderer !== null && tooltipRenderer !== void 0 ? tooltipRenderer : defaultTooltipRenderer(xAxis, yAxis) }))); } }));
}
exports.renderTooltip = renderTooltip;
function CustomTooltip(props) {
    var active = props.active, label = props.label, payload = props.payload, tooltipFormatter = props.tooltipFormatter;
    var _a = styles_1.useStyles(createStyles), classes = _a.classes, css = _a.css;
    var sizeClasses = styles_1.useStyles(sizeStyles).classes;
    var size = label && label.length > 60 ? 'big' : 'small';
    var children = tooltipFormatter((payload !== null && payload !== void 0 ? payload : []).map(function (p) { return ({ seriesName: p.name, x: label, y: p.value }); }));
    return active && react_1.default.createElement("div", { className: css(classes.tooltip, sizeClasses[size]) }, children);
}
function defaultTooltipRenderer(xAxis, yAxis) {
    return function (points) { return react_1.default.createElement(DefaultTooltip, { points: points, xAxis: xAxis, yAxis: yAxis }); };
}
function DefaultTooltip(props) {
    var _a;
    var points = props.points, xAxis = props.xAxis, yAxis = props.yAxis;
    var theme = styles_1.useTheme();
    return ((points === null || points === void 0 ? void 0 : points.length) && (react_1.default.createElement(react_1.default.Fragment, null, points === null || points === void 0 ? void 0 :
        points.map(function (p) {
            var _a;
            return (react_1.default.createElement(Text_1.Text, { component: 'p', style: { color: theme.pallete.gray.c100 }, key: p.y }, p.seriesName + ": " + p.y + " " + ((_a = yAxis === null || yAxis === void 0 ? void 0 : yAxis.unit) !== null && _a !== void 0 ? _a : '')));
        }),
        react_1.default.createElement(Text_1.Text, { component: 'p', style: { color: theme.pallete.gray.c100 } }, xAxis.title + ": " + (model_1.isDateRange(xAxis === null || xAxis === void 0 ? void 0 : xAxis.domain)
            ? ((_a = xAxis.domain.format) !== null && _a !== void 0 ? _a : util_1.defaultChartDateFormatter)(new Date(points[0].x))
            : points[0].x)))));
}
var createStyles = function (theme) { return ({
    tooltip: {
        borderRadius: theme.radius.popper,
        maxWidth: theme.breakpoints.size.lg,
        background: theme.pallete.gray.c20,
        fontSize: '0.875rem',
        fontWeight: 'bold',
        lineHeight: 1.5,
    },
    tooltipText: {
        color: theme.pallete.gray.c100,
    },
}); };
var sizeStyles = function () { return ({
    small: {
        textAlign: 'center',
        padding: '0.5rem',
    },
    big: {
        textAlign: 'left',
        padding: '1rem',
        maxWidth: 277,
    },
}); };
//# sourceMappingURL=renderTooltip.js.map