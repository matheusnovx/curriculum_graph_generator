"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inline = exports.MultiSelect = exports.CustomComponents = exports.Async = exports.Suggestion = exports.Default = void 0;
var addon_actions_1 = require("@storybook/addon-actions");
var addon_knobs_1 = require("@storybook/addon-knobs");
var match_sorter_1 = __importDefault(require("match-sorter"));
var react_1 = __importDefault(require("react"));
var styles_1 = require("../../styles");
var Button_1 = require("../Button");
var HFlow_1 = require("../HFlow");
var Text_1 = require("../Text");
var Combobox_1 = require("./Combobox");
var ComboboxMenuComponents_1 = require("./ComboboxMenuComponents");
var fruits = [
    { value: 1, label: 'Apple' },
    { value: 2, label: 'Avocado' },
    { value: 3, label: 'Banana' },
    { value: 4, label: 'Blueberry' },
    { value: 5, label: 'Coconut' },
    { value: 6, label: 'Grape' },
    { value: 7, label: 'Lemon' },
    { value: 8, label: 'Mango' },
    { value: 9, label: 'Melon' },
    { value: 10, label: 'Orange' },
    { value: 11, label: 'Peach' },
    { value: 12, label: 'Pear' },
];
var loadFruitsAsync = function (query) {
    addon_actions_1.action('items loaded')();
    return new Promise(function (resolve) {
        setTimeout(function () {
            return resolve(match_sorter_1.default(fruits, query, { keys: [function (item) { return item.label; }] }));
        }, 1000);
    });
};
function CustomComponent(props) {
    var theme = styles_1.useTheme();
    return (react_1.default.createElement("div", __assign({ style: {
            background: theme.pallete.surface.background,
            padding: '0.25rem 0.5rem',
            cursor: 'initial',
        } }, props)));
}
exports.default = {
    title: 'Components/Combobox',
};
exports.Default = function () { return (react_1.default.createElement(Combobox_1.Combobox, { value: fruits.find(function (e) { return e.label === addon_knobs_1.select('value', __spreadArrays([''], fruits.map(function (e) { return e.label; })), ''); }), label: 'Fruit', name: 'fruit', items: fruits, error: addon_knobs_1.text('error', ''), menuMinWidth: addon_knobs_1.number('menuMinWidth (px)', undefined), itemToString: function (item) { return item === null || item === void 0 ? void 0 : item.label; }, placeholder: addon_knobs_1.text('placeholder', 'Select a value...'), clearable: addon_knobs_1.boolean('clearable', true), disabled: addon_knobs_1.boolean('disabled', false), openOnFocus: addon_knobs_1.boolean('openOnFocus', true), loading: addon_knobs_1.boolean('loading', false), open: addon_knobs_1.select('open', [undefined, true, false], undefined), onChange: addon_actions_1.action('changed'), onFilterChange: addon_actions_1.action('filter changed'), onBlur: addon_actions_1.action('blur'), onFocus: addon_actions_1.action('focus') })); };
exports.Suggestion = function () { return (react_1.default.createElement(Combobox_1.Combobox, { createNewItem: function (str) { return ({ value: Math.random(), label: str }); }, label: 'Fruit', name: 'fruit', items: fruits, error: addon_knobs_1.text('error', ''), icon: null, itemToString: function (item) { return item && item.label; }, placeholder: 'Select a value...', clearable: addon_knobs_1.boolean('clearable', true), disabled: addon_knobs_1.boolean('disabled', false), openOnFocus: addon_knobs_1.boolean('openOnFocus', false), loading: addon_knobs_1.boolean('loading', false), open: addon_knobs_1.select('open', [undefined, true, false], undefined), onChange: addon_actions_1.action('changed'), onBlur: addon_actions_1.action('blur'), onFocus: addon_actions_1.action('focus') })); };
exports.Async = function () { return (react_1.default.createElement(Combobox_1.Combobox, { value: fruits.find(function (e) { return e.label === addon_knobs_1.select('value', __spreadArrays([''], fruits.map(function (e) { return e.label; })), ''); }), label: 'Fruit Repository', name: 'repository', items: loadFruitsAsync, error: addon_knobs_1.text('error', ''), itemToString: function (item) { return item && item.label; }, placeholder: 'Select a value...', clearable: addon_knobs_1.boolean('clearable', true), disabled: addon_knobs_1.boolean('disabled', false), openOnFocus: addon_knobs_1.boolean('openOnFocus', true), open: addon_knobs_1.select('open', [undefined, true, false], undefined), loading: addon_knobs_1.boolean('loading', false), onChange: addon_actions_1.action('changed'), onBlur: addon_actions_1.action('blur'), onFocus: addon_actions_1.action('focus') })); };
exports.CustomComponents = function () { return (react_1.default.createElement(Combobox_1.Combobox, { label: 'Fruit', name: 'fruit', items: fruits, createNewItem: addon_knobs_1.boolean('createNewItem', false) && (function () { return fruits[0]; }), itemToString: function (item) { return item && item.label; }, components: {
        Item: function (props) { return (react_1.default.createElement(ComboboxMenuComponents_1.ComboboxMenuItem, __assign({}, props),
            react_1.default.createElement(Text_1.Text, { color: 'success' },
                "Custom ",
                props.itemToString(props.item)))); },
        PrependItem: function (props) { return react_1.default.createElement(CustomComponent, null, "Prepend item"); },
        EmptyItem: function (props) { return react_1.default.createElement(CustomComponent, null, "Empty item"); },
        CreateItem: function (props) { return react_1.default.createElement(CustomComponent, null, "Create item"); },
        LoadingItem: function (props) { return react_1.default.createElement(CustomComponent, null, "Loading item..."); },
        AppendItem: function (props) { return (react_1.default.createElement(CustomComponent, null,
            react_1.default.createElement(HFlow_1.HFlow, { alignItems: 'center', justifyContent: 'space-between' },
                react_1.default.createElement(Text_1.Text, null, "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Maxime quod modi, inventore quasi aut sed beatae corrupti repellendus minima voluptatem debitis, quibusdam repudiandae totam voluptatum odit."),
                react_1.default.createElement(Button_1.Button, { kind: 'primary', size: 'small', onClick: addon_actions_1.action('New item click') }, "New item")))); },
    } })); };
exports.MultiSelect = function () {
    var selectedValues = addon_knobs_1.optionsKnob('values', Object.fromEntries(fruits.map(function (e) { return [e.label, e.label]; })), [], {
        display: 'multi-select',
    });
    return (react_1.default.createElement(Combobox_1.Combobox, { itemIsEqual: function (a, b) { return a.label === b.label; }, value: fruits.filter(function (e) { return selectedValues.includes(e.label); }), label: 'Fruit', name: 'fruit', items: fruits, error: addon_knobs_1.text('error', ''), menuMinWidth: addon_knobs_1.number('menuMinWidth (px)', undefined), itemToString: function (item) { return item === null || item === void 0 ? void 0 : item.label; }, placeholder: addon_knobs_1.text('placeholder', 'Select the values...'), clearable: addon_knobs_1.boolean('clearable', true), disabled: addon_knobs_1.boolean('disabled', false), openOnFocus: addon_knobs_1.boolean('openOnFocus', true), clearFilterOnSelect: addon_knobs_1.boolean('clearFilterOnSelect', true), open: addon_knobs_1.select('open', [undefined, true, false], undefined), loading: addon_knobs_1.boolean('loading', false), onChange: addon_actions_1.action('changed'), onFilterChange: addon_actions_1.action('filter changed'), onBlur: addon_actions_1.action('blur'), onFocus: addon_actions_1.action('focus'), multiple: true }));
};
exports.Inline = function () { return (react_1.default.createElement(Combobox_1.Combobox, { inline: true, defaultButtonText: addon_knobs_1.text('defaultButtonText', 'Fruit'), value: fruits.find(function (e) { return e.label === addon_knobs_1.select('value', __spreadArrays([''], fruits.map(function (e) { return e.label; })), ''); }), name: 'fruit', items: fruits, error: addon_knobs_1.text('error', ''), menuMinWidth: addon_knobs_1.number('menuMinWidth (px)', undefined), itemToString: function (item) { return item === null || item === void 0 ? void 0 : item.label; }, searchBoxPlaceholder: addon_knobs_1.text('searchBoxPlaceholder', 'Search...'), disabled: addon_knobs_1.boolean('disabled', false), showSearchBox: addon_knobs_1.boolean('showSearchBox', true), loading: addon_knobs_1.boolean('loading', false), open: addon_knobs_1.select('open', [undefined, true, false], undefined), onChange: addon_actions_1.action('changed'), onFilterChange: addon_actions_1.action('filter changed'), onBlur: addon_actions_1.action('blur'), onFocus: addon_actions_1.action('focus') })); };
//# sourceMappingURL=Combobox.stories.js.map