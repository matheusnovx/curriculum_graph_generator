import React, { FocusEventHandler, KeyboardEventHandler } from 'react';
import { PopperProps } from 'react-popper';
import { Theme } from '../../styles';
import { UseFormControlProps } from '../../hooks/useFormControl';
import { ButtonProps } from '../Button';
import { ComboboxComponents } from './ComboboxMenuComponents';
export interface ComboboxInlineProps<T> extends Omit<ButtonProps, 'value' | 'onChange' | 'placeholder' | 'onKeyDown' | 'onBlur'>, Omit<UseFormControlProps, 'label'> {
    value?: T;
    items: T[] | ((query: string) => Promise<T[]>);
    itemToString(item: T): string;
    loading: boolean;
    open?: boolean;
    debounceMilliseconds: number;
    menuMinWidth?: number;
    filter?(items: T[], filter: string): T[];
    onChange?: (newValue: T) => void;
    onKeyDown?: KeyboardEventHandler;
    onBlur?: FocusEventHandler;
    onFilterChange?: (newValue: string) => void;
    components?: Omit<Partial<ComboboxComponents<T>>, 'CreateItem'>;
    popperProps?: Omit<Partial<PopperProps<any>>, 'children'>;
    menuId?: string;
    toggleButtonId?: string;
    getItemId?(index: number): string;
    defaultButtonText: string;
    searchBoxPlaceholder?: string;
    showSearchBox?: boolean;
}
export declare function ComboboxInline<T>(props: ComboboxInlineProps<T>): JSX.Element;
export declare const createStyles: (theme: Theme) => {
    searchBoxContainer: {
        padding: string;
        borderBottom: string;
    };
    listBox: {
        overflow: string;
    };
    toggleIcon: {
        marginLeft: string;
    };
    menu: React.CSSProperties;
};
