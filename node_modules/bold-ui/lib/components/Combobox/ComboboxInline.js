"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStyles = exports.ComboboxInline = void 0;
var downshift_1 = require("downshift");
var match_sorter_1 = __importDefault(require("match-sorter"));
var react_1 = __importStar(require("react"));
var react_popper_1 = require("react-popper");
var react_2 = require("react");
var lodash_1 = require("lodash");
var styles_1 = require("../../styles");
var react_3 = require("../../util/react");
var FormControl_1 = require("../FormControl");
var useFormControl_1 = require("../../hooks/useFormControl");
var Button_1 = require("../Button");
var Icon_1 = require("../Icon");
var Text_1 = require("../Text");
var ComboboxMenuComponents_1 = require("./ComboboxMenuComponents");
var useComboboxItemsLoader_1 = require("./useComboboxItemsLoader");
var SearchBox_1 = require("./SearchBox");
var ListBox_1 = require("./ListBox");
function ComboboxInline(props) {
    var _a;
    var defaultFilter = react_1.useCallback(function (items, filter) { return match_sorter_1.default(items, filter, { keys: [props.itemToString] }); }, [
        props.itemToString,
    ]);
    var value = props.value, defaultButtonText = props.defaultButtonText, items = props.items, externalLoading = props.loading, debounceMilliseconds = props.debounceMilliseconds, components = props.components, itemToString = props.itemToString, _b = props.menuMinWidth, menuMinWidth = _b === void 0 ? '12rem' : _b, onChange = props.onChange, onFocus = props.onFocus, onClick = props.onClick, onBlur = props.onBlur, onKeyDown = props.onKeyDown, onFilterChange = props.onFilterChange, _c = props.filter, filter = _c === void 0 ? defaultFilter : _c, menuId = props.menuId, toggleButtonId = props.toggleButtonId, getItemId = props.getItemId, error = props.error, searchBoxPlaceholder = props.searchBoxPlaceholder, _d = props.showSearchBox, showSearchBox = _d === void 0 ? true : _d, open = props.open, popperProps = props.popperProps, rest = __rest(props, ["value", "defaultButtonText", "items", "loading", "debounceMilliseconds", "components", "itemToString", "menuMinWidth", "onChange", "onFocus", "onClick", "onBlur", "onKeyDown", "onFilterChange", "filter", "menuId", "toggleButtonId", "getItemId", "error", "searchBoxPlaceholder", "showSearchBox", "open", "popperProps"]);
    var _e = react_1.useState(false), itemsLoaded = _e[0], setItemsLoaded = _e[1];
    var classes = styles_1.useStyles(exports.createStyles).classes;
    var isAsync = typeof items === 'function';
    var getItems = react_1.useCallback(function (query) { return (typeof items === 'function' ? items(query) : filter(items, query)); }, [
        items,
        filter,
    ]);
    var _f = useComboboxItemsLoader_1.useComboboxItemsLoader(getItems, debounceMilliseconds), loadingItems = _f.loading, loadedItems = _f.items, loadItems = _f.loadItems;
    var isLoading = externalLoading || (isAsync && loadingItems);
    // Reload items when changed
    react_1.useEffect(function () { return setItemsLoaded(false); }, [items]);
    var toggleButtonRef = react_1.useRef();
    var _g = react_1.useState(), searchBoxRef = _g[0], setSearchBoxRef = _g[1];
    var menuRef = react_1.useRef();
    react_1.useEffect(function () {
        if (open && !itemsLoaded) {
            loadItems(searchBoxRef === null || searchBoxRef === void 0 ? void 0 : searchBoxRef.value);
            setItemsLoaded(true);
        }
    }, [open, itemsLoaded, loadItems, searchBoxRef]);
    var _h = downshift_1.useSelect(__assign({ selectedItem: value, items: loadedItems, itemToString: itemToString, onSelectedItemChange: function (_a) {
            var selectedItem = _a.selectedItem;
            closeMenu();
            onChange === null || onChange === void 0 ? void 0 : onChange(selectedItem);
        }, onIsOpenChange: function (_a) {
            var isOpen = _a.isOpen;
            isOpen && !itemsLoaded && loadItems(null);
            setItemsLoaded(isOpen);
        }, menuId: menuId,
        toggleButtonId: toggleButtonId,
        getItemId: getItemId }, (lodash_1.isNil(open) ? {} : { isOpen: open }))), selectedItem = _h.selectedItem, isOpen = _h.isOpen, highlightedIndex = _h.highlightedIndex, getLabelProps = _h.getLabelProps, getMenuProps = _h.getMenuProps, getToggleButtonProps = _h.getToggleButtonProps, getItemProps = _h.getItemProps, closeMenu = _h.closeMenu, openMenu = _h.openMenu;
    var onSearchBoxValueChange = react_1.useCallback(function (_a) {
        var inputValue = _a.target.value;
        return react_3.composeHandlers(loadItems, onFilterChange)(inputValue);
    }, [loadItems, onFilterChange]);
    var getFormControlProps = useFormControl_1.useFormControl(props).getFormControlProps;
    var formControlProps = getFormControlProps();
    var invalid = !!formControlProps.error;
    var downshiftLabelProps = getLabelProps();
    var downshiftMenuProps = getMenuProps({
        tabIndex: -1,
        'aria-invalid': invalid,
        'aria-errormessage': formControlProps.errorId,
    });
    var _j = getToggleButtonProps({
        role: null,
        onClick: onClick,
        onFocus: onFocus,
        onBlur: onBlur,
        onKeyDown: onKeyDown,
    }), downshiftToggleButtonRef = _j.ref, downshiftToggleButtonProps = __rest(_j, ["ref"]);
    var _k = react_popper_1.usePopper(toggleButtonRef.current, menuRef.current, __assign({ placement: 'bottom-start' }, popperProps)), popperStyles = _k.styles.popper, popperAttributes = _k.attributes.popper;
    var componentsInner = react_2.useMemo(function () { return (__assign(__assign({}, ComboboxMenuComponents_1.defaultComboboxComponents), (components !== null && components !== void 0 ? components : {}))); }, [components]);
    react_1.useEffect(function () {
        if (isOpen && searchBoxRef) {
            searchBoxRef.focus();
            openMenu();
        }
    }, [isOpen, searchBoxRef, openMenu]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(FormControl_1.FormControl, __assign({}, formControlProps),
            react_1.default.createElement(Button_1.Button, __assign({ innerRef: react_3.composeRefs(toggleButtonRef, downshiftToggleButtonRef), skin: 'ghost', kind: invalid ? 'danger' : 'normal', size: 'small', component: 'div' }, downshiftToggleButtonProps, rest),
                react_1.default.createElement(Text_1.Text, __assign({ component: 'label', style: selectedItem != null ? { display: 'none' } : { cursor: 'pointer' } }, downshiftLabelProps, { color: invalid ? 'danger' : 'normal' }), defaultButtonText),
                selectedItem != null && react_1.default.createElement(Text_1.Text, { color: invalid ? 'danger' : 'normal' }, itemToString(selectedItem)),
                react_1.default.createElement(Icon_1.Icon, { style: classes.toggleIcon, icon: isOpen ? 'angleUp' : 'angleDown' }))),
        react_1.default.createElement("div", __assign({ "aria-busy": isLoading }, downshiftMenuProps), isOpen && (react_1.default.createElement("div", __assign({ "data-testid": 'menu', ref: menuRef, className: classes.menu, style: __assign(__assign({}, popperStyles), { width: (_a = toggleButtonRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth, minWidth: menuMinWidth }) }, popperAttributes),
            showSearchBox && (react_1.default.createElement("div", { className: classes.searchBoxContainer },
                react_1.default.createElement(SearchBox_1.SearchBox, { ref: setSearchBoxRef, placeholder: searchBoxPlaceholder, onChange: onSearchBoxValueChange, onKeyDown: downshiftToggleButtonProps.onKeyDown, onBlur: downshiftToggleButtonProps.onBlur }))),
            react_1.default.createElement(ListBox_1.ListBox, { components: componentsInner, getItemProps: getItemProps, highlightedIndex: highlightedIndex, itemToString: itemToString, items: loadedItems, loading: isLoading, className: classes.listBox, tabIndex: -1 }))))));
}
exports.ComboboxInline = ComboboxInline;
exports.createStyles = function (theme) { return ({
    searchBoxContainer: {
        padding: '0.5rem',
        borderBottom: "1px solid " + theme.pallete.divider,
    },
    listBox: {
        overflow: 'auto',
    },
    toggleIcon: {
        marginLeft: '0.5rem',
    },
    menu: {
        display: 'flex',
        flexDirection: 'column',
        zIndex: theme.zIndex.dropdown,
        border: "1px solid " + theme.pallete.divider,
        borderRadius: theme.radius.popper,
        backgroundColor: theme.pallete.surface.main,
        boxShadow: theme.shadows.outer['40'],
        maxHeight: '20rem',
    },
}); };
//# sourceMappingURL=ComboboxInline.js.map