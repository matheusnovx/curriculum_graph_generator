import React from 'react';
import { ExternalStyles } from '../../styles';
import { ComboboxProps } from './Combobox';
export interface ComboboxComponents<T> {
    /**
     * Item shown when `creteNewItem` prop is indicated.
     */
    CreateItem: React.ComponentType<ComboboxMenuItemProps>;
    /**
     * Item shown when `loading` prop is true.
     */
    LoadingItem: React.ComponentType<ComboboxMenuItemProps>;
    /**
     * Item shown when `items` array prop is empty.
     */
    EmptyItem: React.ComponentType<ComboboxMenuItemProps>;
    /**
     * Default item component used for each element in `items` prop.
     */
    Item: React.ForwardRefExoticComponent<ComboboxItemProps<T>> | React.ForwardRefRenderFunction<ComboboxItemProps<T>>;
    /**
     * A custom item to be included at the beginning of the select list.
     */
    PrependItem: React.ComponentType<ComboboxMenuItemProps>;
    /**
     * A custom item to be included at the end of the select list.
     */
    AppendItem: React.ComponentType<ComboboxMenuItemProps>;
}
export interface ComboboxMultiselectComponents<T> extends Omit<ComboboxComponents<T>, 'Item'> {
    /**
     * Component to display selected items in the input
     */
    SelectedItem: React.ForwardRefExoticComponent<ComboboxMultiselectSelectedItemProps>;
    /**
     * Default item component used for each element in `items` prop.
     */
    Item: React.ForwardRefExoticComponent<ComboboxItemProps<T>> | React.ForwardRefRenderFunction<ComboboxItemProps<T>>;
}
export interface ComboboxMenuItemProps extends Omit<React.LiHTMLAttributes<HTMLLIElement>, 'style'> {
    style?: ExternalStyles;
}
export declare type ComboboxItemProps<T> = ComboboxMenuItemProps & Pick<ComboboxProps<T>, 'itemToString'> & {
    item: T;
    index: number;
    selected?: boolean;
    highlighted?: boolean;
};
export declare const ComboboxMenuItem: React.ForwardRefExoticComponent<ComboboxMenuItemProps & Pick<ComboboxProps<any>, "itemToString"> & {
    item: any;
    index: number;
    selected?: boolean;
    highlighted?: boolean;
} & React.RefAttributes<HTMLLIElement>>;
export declare const ComboboxMultiselectMenuItem: React.ForwardRefExoticComponent<ComboboxMenuItemProps & Pick<ComboboxProps<any>, "itemToString"> & {
    item: any;
    index: number;
    selected?: boolean;
    highlighted?: boolean;
} & React.RefAttributes<HTMLLIElement>>;
export interface ComboboxMultiselectSelectedItemProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'style'> {
    style?: ExternalStyles;
    disabled?: boolean;
    onRemove(e: React.MouseEvent<HTMLSpanElement>): void;
}
export declare const ComboboxMultiselectSelectedItem: React.ForwardRefExoticComponent<ComboboxMultiselectSelectedItemProps & React.RefAttributes<HTMLSpanElement>>;
export declare function ComboboxLoadingItem(props: ComboboxMenuItemProps): JSX.Element;
export declare function ComboboxEmptyItem(props: ComboboxMenuItemProps): JSX.Element;
export declare function ComboboxCreateItem(props: ComboboxMenuItemProps): JSX.Element;
export declare const defaultComboboxComponents: ComboboxComponents<any>;
export declare const defaultComboboxMultiselectComponents: ComboboxMultiselectComponents<any>;
