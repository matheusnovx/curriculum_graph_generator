"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStyles = exports.ComboboxMultiselect = void 0;
var downshift_1 = require("downshift");
var match_sorter_1 = __importDefault(require("match-sorter"));
var react_1 = __importStar(require("react"));
var react_popper_1 = require("react-popper");
var lodash_1 = require("lodash");
var i18n_1 = require("../../i18n");
var styles_1 = require("../../styles");
var react_2 = require("../../util/react");
var FormControl_1 = require("../FormControl");
var useFormControl_1 = require("../../hooks/useFormControl");
var TextInputBase_1 = require("../TextField/TextInputBase");
var InputWrapper_1 = require("../TextField/InputWrapper");
var util_1 = require("../../util");
var ComboboxMenuComponents_1 = require("./ComboboxMenuComponents");
var useComboboxItemsLoader_1 = require("./useComboboxItemsLoader");
var ListBox_1 = require("./ListBox");
function ComboboxMultiselect(props) {
    var _a;
    var defaultFilter = react_1.useCallback(function (items, filter) { return match_sorter_1.default(items, filter, { keys: [props.itemToString] }); }, [
        props.itemToString,
    ]);
    var value = props.value, items = props.items, disabled = props.disabled, clearable = props.clearable, placeholder = props.placeholder, externalLoading = props.loading, debounceMilliseconds = props.debounceMilliseconds, components = props.components, itemToString = props.itemToString, menuMinWidth = props.menuMinWidth, _b = props.openOnFocus, openOnFocus = _b === void 0 ? true : _b, _c = props.clearFilterOnSelect, clearFilterOnSelect = _c === void 0 ? false : _c, onClear = props.onClear, onChange = props.onChange, onFocus = props.onFocus, onClick = props.onClick, onBlur = props.onBlur, onKeyDown = props.onKeyDown, onFilterChange = props.onFilterChange, itemIsEqual = props.itemIsEqual, _d = props.filter, filter = _d === void 0 ? defaultFilter : _d, inputId = props.inputId, labelId = props.labelId, menuId = props.menuId, toggleButtonId = props.toggleButtonId, getItemId = props.getItemId, open = props.open, popperProps = props.popperProps, rest = __rest(props, ["value", "items", "disabled", "clearable", "placeholder", "loading", "debounceMilliseconds", "components", "itemToString", "menuMinWidth", "openOnFocus", "clearFilterOnSelect", "onClear", "onChange", "onFocus", "onClick", "onBlur", "onKeyDown", "onFilterChange", "itemIsEqual", "filter", "inputId", "labelId", "menuId", "toggleButtonId", "getItemId", "open", "popperProps"]);
    var _e = react_1.useState(false), itemsLoaded = _e[0], setItemsLoaded = _e[1];
    var locale = i18n_1.useLocale();
    var isAsync = typeof items === 'function';
    var getItems = react_1.useCallback(function (query) { return (typeof items === 'function' ? items(query) : filter(items, query)); }, [
        items,
        filter,
    ]);
    var _f = useComboboxItemsLoader_1.useComboboxItemsLoader(getItems, debounceMilliseconds), loadingItems = _f.loading, loadedItems = _f.items, loadItems = _f.loadItems;
    var isLoading = externalLoading || (isAsync && loadingItems);
    // Reload items when changed
    react_1.useEffect(function () { return setItemsLoaded(false); }, [items]);
    var inputRef = react_1.useRef();
    var wrapperRef = react_1.useRef();
    var _g = react_1.useState(), menuRef = _g[0], setMenuRef = _g[1];
    var _h = downshift_1.useMultipleSelection({
        defaultSelectedItems: util_1.EMPTY_ARRAY,
        onSelectedItemsChange: function (_a) {
            var selectedItems = _a.selectedItems;
            onChange === null || onChange === void 0 ? void 0 : onChange(selectedItems);
        },
    }), getSelectedItemProps = _h.getSelectedItemProps, getDropdownProps = _h.getDropdownProps, addSelectedItem = _h.addSelectedItem, setSelectedItems = _h.setSelectedItems, removeSelectedItem = _h.removeSelectedItem, selectedItems = _h.selectedItems, reset = _h.reset;
    var valueDiffsSelectedItems = (value === null || value === void 0 ? void 0 : value.length) && value !== selectedItems;
    react_1.useEffect(function () {
        if (valueDiffsSelectedItems)
            setSelectedItems(value);
    }, [value, valueDiffsSelectedItems, setSelectedItems]);
    var _j = styles_1.useStyles(exports.createStyles, props, !!selectedItems.length), classes = _j.classes, css = _j.css;
    var isSelected = react_1.useCallback(function (item) { return selectedItems.some(function (selectedItem) { return itemIsEqual(item, selectedItem); }); }, [
        selectedItems,
        itemIsEqual,
    ]);
    react_1.useEffect(function () {
        var _a;
        if (open && !itemsLoaded) {
            loadItems((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.value);
            setItemsLoaded(true);
        }
    }, [open, itemsLoaded, loadItems]);
    var _k = downshift_1.useCombobox(__assign({ defaultHighlightedIndex: 0, selectedItem: null, items: loadedItems, stateReducer: comboboxMultiselectStateReducer, itemToString: itemToString, onInputValueChange: function (_a) {
            var inputValue = _a.inputValue;
            return react_2.composeHandlers(loadItems, onFilterChange)(inputValue);
        }, onSelectedItemChange: function (_a) {
            var selectedItem = _a.selectedItem;
            isSelected(selectedItem) ? removeSelectedItem(selectedItem) : addSelectedItem(selectedItem);
            clearFilterOnSelect && setInputValue('');
        }, onIsOpenChange: function (_a) {
            var isOpen = _a.isOpen, inputValue = _a.inputValue;
            isOpen && !itemsLoaded && loadItems(inputValue);
            setItemsLoaded(true);
        }, inputId: inputId,
        labelId: labelId,
        menuId: menuId,
        toggleButtonId: toggleButtonId,
        getItemId: getItemId }, (lodash_1.isNil(open) ? {} : { isOpen: open }))), isOpen = _k.isOpen, highlightedIndex = _k.highlightedIndex, getLabelProps = _k.getLabelProps, getMenuProps = _k.getMenuProps, getInputProps = _k.getInputProps, getToggleButtonProps = _k.getToggleButtonProps, getItemProps = _k.getItemProps, openMenu = _k.openMenu, setInputValue = _k.setInputValue;
    var _l = useFormControl_1.useFormControl(props), getFormControlProps = _l.getFormControlProps, getFormControlInputProps = _l.getInputProps;
    var _m = getInputProps(getDropdownProps({
        onFocus: react_2.composeHandlers(onFocus, function () { return openOnFocus && openMenu(); }),
        preventKeyAction: isOpen,
        onClick: onClick,
        onBlur: onBlur,
        onKeyDown: onKeyDown,
    })), downshiftInputRef = _m.ref, downshiftInputProps = __rest(_m, ["ref"]);
    var _o = getLabelProps(), internalLabelId = _o.id, downshiftLabelProps = __rest(_o, ["id"]);
    var downshiftMenuProps = getMenuProps();
    var _p = getToggleButtonProps(), toggleButtonRef = _p.ref, downshiftToggleButtonProps = __rest(_p, ["ref"]);
    var _q = react_popper_1.usePopper(wrapperRef.current, menuRef, __assign({ placement: 'bottom-start' }, popperProps)), popperStyles = _q.styles.popper, popperAttributes = _q.attributes.popper;
    var formControlInputProps = getFormControlInputProps();
    var formControlProps = getFormControlProps();
    var invalid = !!formControlProps.error;
    var handleWrapperClick = function () { return inputRef.current.focus(); };
    var handleItemClick = react_1.useCallback(function (item) {
        isSelected(item) ? removeSelectedItem(item) : addSelectedItem(item);
        clearFilterOnSelect && setInputValue('');
    }, [isSelected, removeSelectedItem, addSelectedItem]);
    var handleItemRemove = react_1.useCallback(function (item) { return function (e) {
        removeSelectedItem(item);
        e.stopPropagation();
    }; }, [removeSelectedItem]);
    var wrapperClasses = css(classes.wrapper, invalid && classes.invalid, props.disabled && classes.disabled);
    var _r = react_1.useMemo(function () { return (__assign(__assign({}, ComboboxMenuComponents_1.defaultComboboxMultiselectComponents), (components !== null && components !== void 0 ? components : {}))); }, [components]), SelectedItem = _r.SelectedItem, componentsRest = __rest(_r, ["SelectedItem"]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(FormControl_1.FormControl, __assign({}, formControlProps, { labelId: internalLabelId }, downshiftLabelProps),
            react_1.default.createElement(InputWrapper_1.InputWrapper, { ref: wrapperRef, className: wrapperClasses, onClick: handleWrapperClick, clearVisible: clearable && !!selectedItems.length, onClear: react_2.composeHandlers(reset, onClear), icon: isOpen ? 'angleUp' : 'angleDown', iconAriaLabel: isOpen ? locale.combobox.hideOptions : locale.combobox.showOptions, iconPosition: 'right', iconProps: downshiftToggleButtonProps, iconRef: toggleButtonRef },
                selectedItems.map(function (selectedItem, index) { return (react_1.default.createElement(SelectedItem, __assign({ key: "selected-item-" + index, onRemove: handleItemRemove(selectedItem), disabled: disabled }, getSelectedItemProps({ selectedItem: selectedItem, index: index })), itemToString(selectedItem))); }),
                react_1.default.createElement(TextInputBase_1.TextInputBase, __assign({ inputRef: react_2.composeRefs(inputRef, downshiftInputRef), className: classes.input, disabled: disabled, invalid: invalid, placeholder: !selectedItems.length ? placeholder : null }, formControlInputProps, downshiftInputProps, rest)))),
        react_1.default.createElement("div", __assign({ "aria-busy": isLoading }, downshiftMenuProps), isOpen && (react_1.default.createElement(ListBox_1.ListBox, __assign({ "data-testid": 'menu', className: classes.menu, style: __assign(__assign({}, popperStyles), { width: (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth, minWidth: menuMinWidth }), onItemClick: handleItemClick, isItemSelected: isSelected }, popperAttributes, { ref: setMenuRef, components: componentsRest, getItemProps: getItemProps, highlightedIndex: highlightedIndex, itemToString: itemToString, items: loadedItems, loading: isLoading, tabIndex: -1 }))))));
}
exports.ComboboxMultiselect = ComboboxMultiselect;
function comboboxMultiselectStateReducer(state, actionAndChanges) {
    var type = actionAndChanges.type, changes = actionAndChanges.changes;
    switch (type) {
        case downshift_1.useCombobox.stateChangeTypes.InputKeyDownEnter:
        case downshift_1.useCombobox.stateChangeTypes.ItemClick:
            return __assign(__assign({}, changes), { isOpen: true });
        case downshift_1.useCombobox.stateChangeTypes.InputBlur:
            return __assign(__assign({}, changes), { inputValue: '' });
        case downshift_1.useCombobox.stateChangeTypes.InputClick:
            return __assign(__assign({}, changes), { isOpen: state.isOpen });
        default:
            return changes;
    }
}
exports.createStyles = function (theme, _a, hasSelectedItems) {
    var disabled = _a.disabled, clearable = _a.clearable;
    var parts = TextInputBase_1.createStyleParts(theme);
    return {
        wrapper: __assign(__assign({}, parts.base), { cursor: 'text', display: 'flex', gap: '0.25rem', flexWrap: 'wrap', alignItems: 'center', padding: hasSelectedItems ? 'calc(0.25rem - 1px) 0.25rem' : 'calc(0.5rem - 1px) 0.5rem', '&:hover': !disabled && parts.hover, '&:active': !disabled && parts.active, '&:focus-within': !disabled && parts.focus, paddingRight: clearable && hasSelectedItems ? '5rem' : '3rem' }),
        disabled: parts.disabled,
        invalid: __assign(__assign({}, parts.invalid), { '&:focus-within': parts.invalid[':not(:disabled):focus'] }),
        input: {
            fontFamily: theme.typography.fontFamily,
            fontSize: theme.typography.sizes.text,
            color: theme.pallete.text.main,
            lineHeight: '1rem',
            background: theme.pallete.surface.main,
            padding: 0,
            paddingRight: '0 !important',
            minWidth: '5rem',
            flex: 1,
            border: 0,
            outline: 0,
            '::placeholder': parts.placeholder,
            ':disabled': parts.disabled,
            '~ span': {
                top: 0,
                right: 0,
                bottom: 0,
            },
        },
        menu: {
            display: 'flex',
            flexDirection: 'column',
            zIndex: theme.zIndex.dropdown,
            border: "1px solid " + theme.pallete.divider,
            borderRadius: theme.radius.popper,
            backgroundColor: theme.pallete.surface.main,
            boxShadow: theme.shadows.outer['40'],
            maxHeight: '20rem',
        },
    };
};
//# sourceMappingURL=ComboboxMultiselect.js.map