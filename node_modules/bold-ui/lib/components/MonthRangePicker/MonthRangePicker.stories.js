"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MinMax = exports.Default = void 0;
var addon_actions_1 = require("@storybook/addon-actions");
var addon_knobs_1 = require("@storybook/addon-knobs");
var react_1 = __importStar(require("react"));
var MonthRangePicker_1 = require("./MonthRangePicker");
var start = { month: 5, year: 2020 };
var end = { month: 1, year: 2021 };
var initialValue = { start: start, end: end };
var minMonth = { month: 0, year: 2020 };
var maxMonth = { month: 3, year: 2021 };
exports.default = {
    title: 'Components/MonthRangePicker',
};
var handleChange = function (setRange) { return function (dateRange) {
    var startDate = dateRange.startDate, endDate = dateRange.endDate;
    if (startDate && endDate) {
        setRange({
            start: { month: startDate.getMonth(), year: startDate.getFullYear() },
            end: { month: endDate.getMonth(), year: endDate.getFullYear() },
        });
    }
    else if (startDate) {
        setRange({
            start: { month: startDate.getMonth(), year: startDate.getFullYear() },
            end: undefined,
        });
    }
    else if (endDate) {
        setRange({
            start: undefined,
            end: { month: endDate.getMonth(), year: endDate.getFullYear() },
        });
    }
    else {
        setRange({ start: undefined, end: undefined });
    }
    addon_actions_1.action('changed')(dateRange);
}; };
exports.Default = function () {
    var _a = react_1.useState(initialValue), range = _a[0], setRange = _a[1];
    return (react_1.default.createElement(MonthRangePicker_1.MonthRangePicker, { label: addon_knobs_1.text('label', 'Month Field'), error: addon_knobs_1.text('error', ''), onChange: function (dateRange) { return handleChange(setRange)(dateRange); }, inline: addon_knobs_1.boolean('inline', false), required: addon_knobs_1.boolean('required', false), disabled: addon_knobs_1.boolean('disabled', false), value: range }));
};
exports.MinMax = function () {
    var _a = react_1.useState(initialValue), range = _a[0], setRange = _a[1];
    return (react_1.default.createElement(MonthRangePicker_1.MonthRangePicker, { label: addon_knobs_1.text('label', 'Month Field'), error: addon_knobs_1.text('error', ''), onChange: function (dateRange) { return handleChange(setRange)(dateRange); }, disabled: addon_knobs_1.boolean('disabled', false), value: range, minMonth: addon_knobs_1.object('minMonth', minMonth), maxMonth: addon_knobs_1.object('maxMonth', maxMonth) }));
};
//# sourceMappingURL=MonthRangePicker.stories.js.map