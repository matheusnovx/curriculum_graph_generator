"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditableType = exports.AllTypes = void 0;
var react_1 = __importDefault(require("react"));
var lodash_1 = require("lodash");
var addon_knobs_1 = require("@storybook/addon-knobs");
var HFlow_1 = require("../../HFlow");
var PivotTableCell_1 = require("./PivotTableCell");
var GridArea_1 = require("./classes/GridArea");
var PivotTableProvider_1 = require("./PivotTableProvider");
var model_1 = require("./model");
exports.default = {
    title: 'Components/PivotTable/PivotTableCell',
};
exports.AllTypes = function () {
    var maxValue = 9;
    var cellsTypeAndContent = __spreadArrays([
        { type: model_1.PivotTableCellType.HEADER, content: 'Header' },
        { type: model_1.PivotTableCellType.EMPTY, content: 'empty' }
    ], lodash_1.times(maxValue + 1, function (n) { return ({
        type: model_1.PivotTableCellType.VALUE,
        content: n,
    }); }), [
        { type: model_1.PivotTableCellType.GRANDTOTAL, content: 45 },
        { type: model_1.PivotTableCellType.TOTAL, content: 45 },
    ]);
    return (react_1.default.createElement(PivotTableProvider_1.PivotTableProvider, { maxValue: maxValue, suffix: '' },
        react_1.default.createElement(HFlow_1.HFlow, { hSpacing: 0 }, cellsTypeAndContent.map(function (_a, idx) {
            var type = _a.type, content = _a.content;
            var types = new Set([type]);
            var gridArea = new GridArea_1.GridArea(0, idx);
            return (react_1.default.createElement(PivotTableCell_1.PivotTableCell, { types: types, key: gridArea.toString(), gridArea: gridArea, isEndRow: true, isEndColumn: cellsTypeAndContent.length - 1 === idx }, content));
        }))));
};
exports.EditableType = function () {
    var gridArea = new GridArea_1.GridArea(0, 0);
    var maxValue = 10;
    var suffix = '';
    var typeEnumValue = addon_knobs_1.select('type', Object.keys(model_1.PivotTableCellType), model_1.PivotTableCellType.VALUE);
    return (react_1.default.createElement(PivotTableProvider_1.PivotTableProvider, { maxValue: maxValue, suffix: addon_knobs_1.text('suffix', suffix) },
        react_1.default.createElement(HFlow_1.HFlow, { hSpacing: 0 },
            react_1.default.createElement(PivotTableCell_1.PivotTableCell, { types: new Set([model_1.PivotTableCellType[typeEnumValue]]), key: gridArea.toString(), gridArea: gridArea, isEndRow: addon_knobs_1.boolean('isEndRow', true), isEndColumn: addon_knobs_1.boolean('isEndColumn', true) }, addon_knobs_1.number('content', 5, { min: 1, max: 10 })))));
};
//# sourceMappingURL=PivotTableCell.stories.js.map