"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectPivotTableCellElements = exports.calculateCellColor = void 0;
var util_1 = require("../../../util");
var MIN_COLOR_INDEX_OF_LIGHT_BG = 70;
/**
 * Calculates text and background colors based on cell type and its content.
 *
 * If cell type is only 'value' and its content is a number:
 * - increase saturation of background color every 10% of maximum value
 * - makes the text color lighter when background becames too dark
 *
 * Otherwise, keep the default background and text color.
 *
 * @param theme
 * @param isOnlyValue True if cell type includes only 'value'
 * @param maxValue The maximum expected value for all the table
 * @param cellContent The cell's content
 * @returns An object containing the text and background colors
 */
exports.calculateCellColor = function (theme, isOnlyValue, maxValue, cellContent) {
    var color = theme.pallete.gray.c10;
    var backgroundColor = theme.pallete.primary.c100;
    var cellValue = Number(cellContent);
    if (isOnlyValue && cellValue) {
        var percentageOfMaxValue = steppedPercentage(cellValue, maxValue, 10);
        var bgColorIndex = util_1.clamp(110 - percentageOfMaxValue, 10, 100);
        if (bgColorIndex < MIN_COLOR_INDEX_OF_LIGHT_BG) {
            color = theme.pallete.gray.c100;
        }
        backgroundColor = theme.pallete.primary["c" + bgColorIndex];
    }
    return {
        color: color,
        backgroundColor: backgroundColor,
    };
};
var steppedPercentage = function (value, baseValue, step) {
    return Math.ceil(((value / baseValue) * 100) / step) * step;
};
/**
 * Selects all the elements that has the given row and column numbers as its 'data-rownumber' and 'data-columnnumber' attributes
 */
exports.selectPivotTableCellElements = function (row, column) {
    return document.querySelectorAll("div[data-rownumber~=\"" + row + "\"], div[data-columnnumber~=\"" + column + "\"]");
};
//# sourceMappingURL=utils.js.map