"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PivotTableGrid = void 0;
var react_1 = require("react");
var react_2 = __importDefault(require("react"));
var styles_1 = require("../../../styles");
var PivotTableCell_1 = require("../PivotTableCell/PivotTableCell");
var buildTable_1 = require("./buildTable");
var SCROLL_LEFT_SHADOW_MARGIN = 10;
function PivotTableGrid(props) {
    var rowKeys = props.rowKeys, columnKeys = props.columnKeys, keysMapping = props.keysMapping, defaultTree = props.defaultTree, complementaryTree = props.complementaryTree;
    var tableContainerRef = react_1.useRef(null);
    var _a = react_1.useState(false), tableExceeds = _a[0], setTableExceeds = _a[1];
    var _b = react_1.useState(true), displayRightShadow = _b[0], setDisplayRightShadow = _b[1];
    var _c = react_1.useState(false), displayLeftShadow = _c[0], setDisplayLeftShadow = _c[1];
    var classes = styles_1.useStyles(createPivotTableGridStyles).classes;
    var cells = buildTable_1.buildTable(rowKeys, columnKeys, defaultTree, complementaryTree, keysMapping);
    var setTableRef = react_1.useCallback(function (ref) {
        tableContainerRef.current = ref;
        if (tableContainerRef.current) {
            var newTableExceeds = tableContainerRef.current.scrollWidth > tableContainerRef.current.clientWidth;
            if (tableExceeds !== newTableExceeds)
                setTableExceeds(newTableExceeds);
        }
    }, [tableExceeds]);
    var handleScroll = react_1.useCallback(function () {
        if (tableContainerRef.current) {
            var displayRight = tableContainerRef.current.scrollLeft !==
                tableContainerRef.current.scrollWidth - tableContainerRef.current.clientWidth;
            var displayLeft = tableContainerRef.current.scrollLeft > SCROLL_LEFT_SHADOW_MARGIN;
            if (displayLeft !== displayLeftShadow) {
                setDisplayLeftShadow(displayLeft);
            }
            if (displayRight !== displayRightShadow) {
                setDisplayRightShadow(displayRight);
            }
        }
    }, [displayLeftShadow, displayRightShadow]);
    return (react_2.default.createElement("div", { className: classes.tableContainer },
        tableExceeds && displayLeftShadow && react_2.default.createElement("div", { className: classes.leftShadow }),
        react_2.default.createElement("div", { onScrollCapture: handleScroll, ref: setTableRef, className: classes.tableWrapper }, cells.map(function (cell) { return (react_2.default.createElement(PivotTableCell_1.PivotTableCell, { types: cell.types, gridArea: cell.gridArea, isEndColumn: cell.isEndColumn, isEndRow: cell.isEndRow, key: cell.gridArea.toString() }, cell.children)); })),
        tableExceeds && displayRightShadow && react_2.default.createElement("div", { className: classes.rightShadow })));
}
exports.PivotTableGrid = PivotTableGrid;
var createPivotTableGridStyles = function () { return ({
    tableContainer: {
        position: 'relative',
        height: '100%',
    },
    tableWrapper: {
        maxWidth: '100%',
        overflow: 'auto',
        display: 'grid',
        placeItems: 'center center',
        placeContent: 'start start',
    },
    leftShadow: {
        position: 'absolute',
        left: '0',
        top: '0',
        height: 'calc(100% - 1rem)',
        width: '0.5rem',
        background: 'linear-gradient(90deg, rgba(0, 0, 0, 0.12) 10%, rgba(255, 255, 255, 0) 100%)',
    },
    rightShadow: {
        position: 'absolute',
        right: '0',
        top: '0',
        height: 'calc(100% - 1rem)',
        width: '0.5rem',
        background: 'linear-gradient(270deg, rgba(0, 0, 0, 0.12) 10%, rgba(255, 255, 255, 0) 100%)',
    },
}); };
//# sourceMappingURL=PivotTableGrid.js.map