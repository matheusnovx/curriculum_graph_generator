"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Default = void 0;
var react_1 = __importDefault(require("react"));
var PivotTableProvider_1 = require("../PivotTableCell/PivotTableProvider");
var PivotTableGrid_1 = require("./PivotTableGrid");
exports.default = {
    title: 'Components/PivotTable/PivotTableGrid',
};
exports.Default = function () {
    var props = {
        keysMapping: new Map([
            [
                'name',
                {
                    keyName: 'Name',
                    ordenator: function (a, b) {
                        return a > b ? 1 : -1;
                    },
                    formatter: function (a) {
                        return a[0].toLocaleUpperCase() + a.slice(1);
                    },
                },
            ],
            [
                'size',
                {
                    keyName: 'Weight',
                    ordenator: function (a, b) {
                        return a > b ? 1 : -0;
                    },
                    formatter: function (a) {
                        return a + ' kg';
                    },
                },
            ],
        ]),
        defaultTree: {
            nodeKey: 'name',
            nodeValue: 7,
            maxLeafValue: 3,
            broccoli: {
                nodeKey: 'size',
                nodeValue: 3,
                maxLeafValue: 1,
                1: { nodeValue: 1 },
                2: { nodeValue: 2 },
            },
            carrot: {
                nodeKey: 'size',
                nodeValue: 4,
                maxLeafValue: 3,
                1: { nodeValue: 1 },
                2: { nodeValue: 3 },
            },
        },
        complementaryTree: {
            nodeKey: 'size',
            nodeValue: 7,
            maxLeafValue: 3,
            1: {
                nodeKey: 'name',
                nodeValue: 2,
                maxLeafValue: 1,
                carrot: { nodeValue: 1 },
                broccoli: { nodeValue: 1 },
            },
            2: {
                nodeKey: 'name',
                nodeValue: 5,
                maxLeafValue: 3,
                carrot: { nodeValue: 3 },
                broccoli: { nodeValue: 2 },
            },
        },
        rowKeys: ['name'],
        columnKeys: ['size'],
    };
    var maxLeafValue = props.defaultTree.maxLeafValue;
    return (react_1.default.createElement(PivotTableProvider_1.PivotTableProvider, { maxValue: maxLeafValue, suffix: '' },
        react_1.default.createElement(PivotTableGrid_1.PivotTableGrid, __assign({}, props))));
};
//# sourceMappingURL=PivotTableGrid.stories.js.map